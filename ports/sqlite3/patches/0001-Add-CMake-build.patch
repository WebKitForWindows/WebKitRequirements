From fb69b964a4d2df25299f097520d6ce0d3d8006c2 Mon Sep 17 00:00:00 2001
From: Don Olmstead <don.j.olmstead@gmail.com>
Date: Tue, 21 Mar 2023 17:20:21 -0700
Subject: [PATCH] Add CMake build

Follows along with the configure options and checks. The `sqlite_cfg.h.cmake` header does an `undef` for any config value that isn't set to 1. The sqlite code isn't consistent with how it checks if a value is turned on.
---
 CMakeLists.txt     | 209 +++++++++++++++++++++++++++++++++++++++++++++
 sqlite3.pc.cmake   |  11 +++
 sqlite_cfg.h.cmake | 142 ++++++++++++++++++++++++++++++
 3 files changed, 362 insertions(+)
 create mode 100644 CMakeLists.txt
 create mode 100644 sqlite3.pc.cmake
 create mode 100644 sqlite_cfg.h.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 000000000..4adbe8795
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,209 @@
+cmake_minimum_required(VERSION 3.10)
+
+project(sqlite VERSION 3.41.2 LANGUAGES C)
+
+option(ENABLE_THREADSAFE "Whether to support threadsafe operation" OFF)
+option(ENABLE_LOAD_EXTENSION "Whether to support loadable extensions" ON)
+option(ENABLE_MATH "Whether to support math functions" OFF)
+option(ENABLE_JSON "Whether to support JSON functions" ON)
+option(ENABLE_MEMSYS5 "Whether to support MEMSYS5" OFF)
+option(ENABLE_MEMSYS3 "Whether to support MEMSYS3" OFF)
+option(ENABLE_FTS3 "Whether to enable FTS3 extension" OFF)
+option(ENABLE_FTS4 "Whether to enable FTS4 extension" OFF)
+option(ENABLE_FTS5 "Whether to enable FTS5 extension" OFF)
+option(ENABLE_UPDATE_LIMIT "Whether to support LIMIT on UPDATE and DELETE statements" OFF)
+option(ENABLE_GEOPOLY "Whether to enable GEOPOLY extension" OFF)
+option(ENABLE_RTREE "Whether to enable RTREE extension" OFF)
+option(ENABLE_SESSION "Whether to enable SESSION extension" OFF)
+
+option(ENABLE_SHELL "Whether to build the SQLite shell" OFF)
+option(WITH_ZLIB "Whether to enable zlib support" OFF)
+
+add_library(sqlite3 sqlite3.c)
+target_compile_definitions(sqlite3 PRIVATE
+  $<$<CONFIG:Debug>:SQLITE_DEBUG=1>
+  $<$<CONFIG:Debug>:SQLITE_ENABLE_SELECTTRACE>
+  $<$<CONFIG:Debug>:SQLITE_ENABLE_WHERETRACE>
+)
+target_include_directories(sqlite3 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
+
+if (ENABLE_THREADSAFE)
+  target_compile_definitions(sqlite3 PRIVATE SQLITE_THREADSAFE=1)
+  find_package(Threads REQUIRED)
+  target_link_libraries(sqlite3 PRIVATE Threads::Threads)
+  string(APPEND PKGCONFIG_LIBS_PRIVATE " ${CMAKE_THREAD_LIBS_INIT}")
+else ()
+  target_compile_definitions(sqlite3 PRIVATE SQLITE_THREADSAFE=0)
+endif()
+
+if (ENABLE_LOAD_EXTENSION)
+  target_link_libraries(sqlite3 PRIVATE ${CMAKE_DL_LIBS})
+else ()
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_OMIT_LOAD_EXTENSION")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_OMIT_LOAD_EXTENSION)
+endif()
+
+if (ENABLE_MATH)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_MATH_FUNCTIONS")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_MATH_FUNCTIONS)
+endif()
+
+if (NOT ENABLE_JSON)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_OMIT_JSON")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_OMIT_JSON)
+endif()
+
+if (ENABLE_MEMSYS5)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_MEMSYS5")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_MEMSYS5)
+endif()
+
+if (ENABLE_MEMSYS3)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_MEMSYS3")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_MEMSYS3)
+endif()
+
+if (ENABLE_FTS3)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_FTS3")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_FTS3)
+endif()
+
+if (ENABLE_FTS4)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_FTS4")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_FTS4)
+endif()
+
+if (ENABLE_FTS5)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_FTS5")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_FTS5)
+endif()
+
+if (ENABLE_UPDATE_LIMIT)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_UPDATE_DELETE_LIMIT)
+endif()
+
+if (ENABLE_RTREE)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_RTREE")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_RTREE)
+endif()
+
+if (ENABLE_SESSION)
+  string(APPEND PKGCONFIG_DEFINES " -DSQLITE_ENABLE_SESSION -DSQLITE_ENABLE_PREUPDATE_HOOK")
+  target_compile_definitions(sqlite3 PUBLIC SQLITE_ENABLE_SESSION SQLITE_ENABLE_PREUPDATE_HOOK)
+endif()
+
+if (NOT WIN32)
+  if (ENABLE_LOAD_EXTENSION)
+    foreach (LIB IN LISTS CMAKE_DL_LIBS)
+      string(APPEND PKGCONFIG_LIBS_PRIVATE " -l${LIB}")
+    endforeach ()
+  endif ()
+
+  if (ENABLE_FTS5 OR ENABLE_MATH)
+    find_library(HAVE_LIBM m)
+    if (HAVE_LIBM)
+      target_link_libraries(sqlite3 PRIVATE m)
+      string(APPEND PKGCONFIG_LIBS_PRIVATE " -lm")
+    endif()
+  endif()
+
+  include(CheckIncludeFile)
+  include(CheckIncludeFiles)
+  include(CheckTypeSize)
+  include(CheckSymbolExists)
+
+  # Corresponds to AC_CHECK_TYPES
+  check_type_size(int8_t INT8_T)
+  check_type_size(int16_t INT16_T)
+  check_type_size(int32_t INT32_T)
+  check_type_size(int64_t INT64_T)
+  check_type_size(intptr_t INTPTR_T)
+  check_type_size(uint8_t UINT8_T)
+  check_type_size(uint16_t UINT16_T)
+  check_type_size(uint32_t UINT32_T)
+  check_type_size(uint64_t UINT64_T)
+  check_type_size(uintptr_t UINTPTR_T)
+
+  # Corresponds to STDC_HEADERS in configure
+  # The value doesn't seem to be used anywhere but is in the config
+  check_include_files("stdlib.h;stddef.h" STDC_HEADERS)
+
+  # Corresponds to AC_CHECK_HEADERS
+  check_include_file(sys/types.h HAVE_SYS_TYPES_H)
+  check_include_file(stdlib.h HAVE_STDLIB_H)
+  check_include_file(stdint.h HAVE_STDINT_H)
+  check_include_file(inttypes.h HAVE_INTTYPES_H)
+  check_include_file(malloc.h HAVE_MALLOC_H)
+
+  # Additional headers from AC_CHECK_FUNCS
+  check_include_file(unistd.h HAVE_UNISTD_H)
+  check_include_file(string.h HAVE_STRING_H)
+
+  # Corresponds to AC_CHECK_FUNCS
+  check_symbol_exists(fdatasync unistd.h HAVE_FDATASYNC)
+  check_symbol_exists(gmtime_r time.h HAVE_GMTIME_R)
+  check_symbol_exists(isnan math.h HAVE_ISNAN)
+  check_symbol_exists(localtime_r time.h HAVE_LOCALTIME_R)
+  check_symbol_exists(localtime_s time.h HAVE_LOCALTIME_S)
+  check_symbol_exists(malloc_usable_size malloc.h HAVE_MALLOC_USABLE_SIZE)
+  check_symbol_exists(strchrnul string.h HAVE_STRCHRNUL)
+  check_symbol_exists(usleep unistd.h HAVE_USLEEP)
+  check_symbol_exists(utime unistd.h HAVE_UTIME)
+  check_symbol_exists(pread unistd.h HAVE_PREAD)
+  check_symbol_exists(pread64 unistd.h HAVE_PREAD64)
+  check_symbol_exists(pwrite unistd.h HAVE_PWRITE)
+  check_symbol_exists(pwrite64 unistd.h HAVE_PWRITE64)
+
+  configure_file(
+    ${CMAKE_CURRENT_SOURCE_DIR}/sqlite_cfg.h.cmake 
+    ${CMAKE_CURRENT_BINARY_DIR}/sqlite_cfg.h
+  )
+
+  target_include_directories(sqlite3 PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
+  target_compile_definitions(sqlite3 PRIVATE _HAVE_SQLITE_CONFIG_H)
+endif ()
+
+if (BUILD_SHARED_LIBS)
+  if (WIN32)
+    string(APPEND PKGCONFIG_DEFINES " -DSQLITE_API=__declspec(dllimport)")
+    target_compile_definitions(sqlite3 PRIVATE "SQLITE_API=__declspec(dllexport)")
+    target_compile_definitions(sqlite3 INTERFACE "SQLITE_API=__declspec(dllimport)")
+  else()
+    string(APPEND PKGCONFIG_DEFINES " -DSQLITE_API=__attribute__((visibility(\"default\")))")
+    target_compile_definitions(sqlite3 PUBLIC "SQLITE_API=__attribute__((visibility(\"default\")))")
+  endif()
+endif()
+
+set(sqlite-targets sqlite3)
+
+if (ENABLE_SHELL)
+  add_executable(sqlite3-bin shell.c)
+
+  target_link_libraries(sqlite3-bin PRIVATE sqlite3)
+  if (WITH_ZLIB)
+    find_package(ZLIB REQUIRED)
+    target_link_libraries(sqlite3-bin PRIVATE ZLIB::ZLIB)
+    target_compile_definitions(sqlite3-bin PRIVATE SQLITE_HAVE_ZLIB)
+  endif()
+
+  list(APPEND sqlite-targets sqlite3-bin)
+endif ()
+
+include(GNUInstallDirs)
+
+install(
+  TARGETS ${sqlite-targets}
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+)
+
+install(
+  FILES sqlite3.h sqlite3ext.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
+)
+
+set(PKGCONFIG_VERSION ${CMAKE_PROJECT_VERSION})
+configure_file(sqlite3.pc.cmake sqlite3.pc @ONLY)
+install(FILES "${CMAKE_CURRENT_BINARY_DIR}/sqlite3.pc" DESTINATION "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig")
diff --git a/sqlite3.pc.cmake b/sqlite3.pc.cmake
new file mode 100644
index 000000000..c7ecbf1a5
--- /dev/null
+++ b/sqlite3.pc.cmake
@@ -0,0 +1,11 @@
+prefix=@CMAKE_INSTALL_PREFIX@
+exec_prefix=${prefix}
+libdir=${prefix}/lib
+includedir=${prefix}/include
+
+Name: SQLite
+Description: SQL database engine
+Version: @PKGCONFIG_VERSION@
+Libs: -L${libdir} -lsqlite3
+Libs.private: @PKGCONFIG_LIBS_PRIVATE@
+Cflags: -I${includedir} @PKGCONFIG_DEFINES@
diff --git a/sqlite_cfg.h.cmake b/sqlite_cfg.h.cmake
new file mode 100644
index 000000000..2dde3123c
--- /dev/null
+++ b/sqlite_cfg.h.cmake
@@ -0,0 +1,142 @@
+/* sqlite_cfg.h.in.  Generated from configure.ac by autoheader.  */
+
+/* Define to 1 if you have the <dlfcn.h> header file. */
+#cmakedefine HAVE_DLFCN_H 1
+
+/* Define to 1 if you have the `fdatasync' function. */
+#cmakedefine HAVE_FDATASYNC 1
+
+/* Define to 1 if you have the `gmtime_r' function. */
+#cmakedefine HAVE_GMTIME_R 1
+
+/* Define to 1 if the system has the type `int16_t'. */
+#cmakedefine HAVE_INT16_T 1
+
+/* Define to 1 if the system has the type `int32_t'. */
+#cmakedefine HAVE_INT32_T 1
+
+/* Define to 1 if the system has the type `int64_t'. */
+#cmakedefine HAVE_INT64_T 1
+
+/* Define to 1 if the system has the type `int8_t'. */
+#cmakedefine HAVE_INT8_T 1
+
+/* Define to 1 if the system has the type `intptr_t'. */
+#cmakedefine HAVE_INTPTR_T 1
+
+/* Define to 1 if you have the <inttypes.h> header file. */
+#cmakedefine HAVE_INTTYPES_H 1
+
+/* Define to 1 if you have the `isnan' function. */
+#cmakedefine HAVE_ISNAN 1
+
+/* Define to 1 if you have the `localtime_r' function. */
+#cmakedefine HAVE_LOCALTIME_R 1
+
+/* Define to 1 if you have the `localtime_s' function. */
+#cmakedefine HAVE_LOCALTIME_S 1
+
+/* Define to 1 if you have the <malloc.h> header file. */
+#cmakedefine HAVE_MALLOC_H 1
+
+/* Define to 1 if you have the `malloc_usable_size' function. */
+#cmakedefine HAVE_MALLOC_USABLE_SIZE 1
+
+/* Define to 1 if you have the <memory.h> header file. */
+#cmakedefine HAVE_MEMORY_H 1
+
+/* Define to 1 if you have the `pread' function. */
+#cmakedefine HAVE_PREAD 1
+
+/* Define to 1 if you have the `pread64' function. */
+#cmakedefine HAVE_PREAD64 1
+
+/* Define to 1 if you have the `pwrite' function. */
+#cmakedefine HAVE_PWRITE 1
+
+/* Define to 1 if you have the `pwrite64' function. */
+#cmakedefine HAVE_PWRITE64 1
+
+/* Define to 1 if you have the <stdint.h> header file. */
+#cmakedefine HAVE_STDINT_H 1
+
+/* Define to 1 if you have the <stdlib.h> header file. */
+#cmakedefine HAVE_STDLIB_H 1
+
+/* Define to 1 if you have the `strchrnul' function. */
+#cmakedefine HAVE_STRCHRNUL 1
+
+/* Define to 1 if you have the <strings.h> header file. */
+#cmakedefine HAVE_STRINGS_H 1
+
+/* Define to 1 if you have the <string.h> header file. */
+#cmakedefine HAVE_STRING_H 1
+
+/* Define to 1 if you have the <sys/stat.h> header file. */
+#cmakedefine HAVE_SYS_STAT_H 1
+
+/* Define to 1 if you have the <sys/types.h> header file. */
+#cmakedefine HAVE_SYS_TYPES_H 1
+
+/* Define to 1 if the system has the type `uint16_t'. */
+#cmakedefine HAVE_UINT16_T 1
+
+/* Define to 1 if the system has the type `uint32_t'. */
+#cmakedefine HAVE_UINT32_T 1
+
+/* Define to 1 if the system has the type `uint64_t'. */
+#cmakedefine HAVE_UINT64_T 1
+
+/* Define to 1 if the system has the type `uint8_t'. */
+#cmakedefine HAVE_UINT8_T 1
+
+/* Define to 1 if the system has the type `uintptr_t'. */
+#cmakedefine HAVE_UINTPTR_T 1
+
+/* Define to 1 if you have the <unistd.h> header file. */
+#cmakedefine HAVE_UNISTD_H 1
+
+/* Define to 1 if you have the `usleep' function. */
+#cmakedefine HAVE_USLEEP 1
+
+/* Define to 1 if you have the `utime' function. */
+#cmakedefine HAVE_UTIME 1
+
+/* Define to 1 if you have the <zlib.h> header file. */
+#cmakedefine HAVE_ZLIB_H 1
+
+/* Define to the sub-directory in which libtool stores uninstalled libraries.
+   */
+#cmakedefine LT_OBJDIR @LT_OBJDIR@
+
+/* Define to the address where bug reports for this package should be sent. */
+#cmakedefine PACKAGE_BUGREPORT @PACKAGE_BUGREPORT@
+
+/* Define to the full name of this package. */
+#cmakedefine PACKAGE_NAME @PACKAGE_NAME@
+
+/* Define to the full name and version of this package. */
+#cmakedefine PACKAGE_STRING @PACKAGE_STRING@
+
+/* Define to the one symbol short name of this package. */
+#cmakedefine PACKAGE_TARNAME @PACKAGE_TARNAME@
+
+/* Define to the home page for this package. */
+#cmakedefine PACKAGE_URL @PACKAGE_URL@
+
+/* Define to the version of this package. */
+#cmakedefine PACKAGE_VERSION @PACKAGE_VERSION@
+
+/* Define to 1 if you have the ANSI C header files. */
+#cmakedefine STDC_HEADERS 1
+
+/* Enable large inode numbers on Mac OS X 10.5.  */
+#ifndef _DARWIN_USE_64_BIT_INODE
+# define _DARWIN_USE_64_BIT_INODE 1
+#endif
+
+/* Number of bits in a file offset, on hosts where this is settable. */
+#cmakedefine _FILE_OFFSET_BITS @_FILE_OFFSET_BITS@
+
+/* Define for large files, on AIX-style hosts. */
+#cmakedefine _LARGE_FILES
-- 
2.41.0.windows.1

